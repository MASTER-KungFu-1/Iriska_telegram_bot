from aiogram import F, Router
from aiogram.filters import Command, and_f
from langs import langs_manager as lm
from aiogram import types
import gui
from config import admin_ids
from handlers.math_game import maths, mathstop
import sys
from create_bot import bot
router = Router()
router.message.filter(F.chat.type == "private")

startstats = {'allcount': 0, 'unique_users':[]}

#------------–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã--------------

#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
@router.message(Command(commands=['stats']))
async def stats(message: types.Message):
    if message.from_user.id in admin_ids:
        await message.answer(f'–í—Å–µ–≥–æ: {startstats["allcount"]}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(startstats["unique_users"])}')


#–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞       
@router.message(Command(commands=['irisstop']))
async def irisstop(message: types.Message):
    if message.from_user.id in admin_ids:
        math_list = [True for math in maths.values() if math.math() == True]
        mathstop['istrue'] = 1
        mathstop['user_id'] = message.from_user.id
        
        mathstop['count'] = len(math_list)
        if mathstop['count'] == 0:
            await message.answer(f'–ù–µ—Ç –ø—Ä–∏–º–µ—Ä–æ–≤')
            sys.exit()
        else:
            message2 = await message.answer(f'–ü—Ä–∏–º–µ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã\n–û–∂–∏–¥–∞—é —Ä–µ—à–µ–Ω–∏—è {len(math_list)} –ø—Ä–∏–º–µ—Ä–æ–≤')
            mathstop['message_id'] = message2.message_id
#---------------------------------------


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(Command(commands=['start']))
async def commands(message: types.Message):
    #lang = lm.load(message.from_user.language_code)
    startstats['allcount'] += 1
    if not message.from_user.id in startstats['unique_users']:
        startstats['unique_users'].append(message.from_user.id)
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éüëã\n–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è —Ç—É–¥–∞ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–ø–∏—Å–∫–µ. –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π —è –±—É–¥—É —Ç—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä. –ö—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ—à–∏—Ç —Ç–æ—Ç –∏ –ø–æ–±–µ–¥–∏—Ç. –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö, –∞ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –±–æ—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤', reply_markup=gui.menu())



# @router.message(Command(commands=['ban']))
# async def ban(message: types.Message):
#     if message.from_user.id in admin_ids:
#         args = message.text.split(' ')
#         args.pop(0)
#         if len(args) <= 1:
#             await message.answer('–ö–æ–º–∞–Ω–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã\n/ban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞]')
#         elif len(args) == 2:
#             await message.answer(str(args))

@router.message(F.text.startswith('/'))
async def commands(message: types.Message):
    lang = lm.load(message.from_user.language_code)
    await message.answer(lang.chat_command, reply_markup=gui.menu())


@router.message(and_f(F.reply_to_message, F.from_user.id == 312731525))
async def reply_text(message: types.Message):
    forward_id = message.reply_to_message.chat.id
    await bot.forward_message(forward_id, message.chat.id,message.message_id)
    #await message.reply_to_message.forward(forward_id,)
    #await message.answer(message.text, reply_markup=gui.menu())
